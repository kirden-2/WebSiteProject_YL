import requests
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from Bot.code.keyboards.inline_kbs import send_change_account_data_kb
from .login import login_router
from .register import register_route
from .view_arts import view_arts_router

from .check_login import check_user_login_now

user_info_router = Router()


class User_info_states(StatesGroup):
    Change_password = State()
    Change_email = State()
    Change_description = State()
    Success_changes = State()


@user_info_router.callback_query(F.data == 'user_info')
@user_info_router.message(User_info_states.Success_changes)
async def get_user_info(call: CallbackQuery, state: FSMContext):
    await state.clear()

    chat_id = call.message.chat.id

    try:
        response = requests.get('http://127.0.0.1:5000/bot_api/get_user_info', json={'chat_id': chat_id}).json()

        await call.message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
                                  f'\n'
                                  f'üôé‚Äç‚ôÇÔ∏è–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response["user"]["nick_name"]}\n'
                                  f'üè∑Ô∏èid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response["user"]["id"]}\n'
                                  f'üìßemail: {response["user"]["email"] if response["user"]["email"] else "–Ω–µ —É–∫–∞–∑–∞–Ω"}\n'
                                  f'‚úèÔ∏è–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: \
{response["user"]["description"] if response["user"]["description"] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                                  f'üí∞–ë–∞–ª–∞–Ω—Å: {response["user"]["balance"]}\n'
                                  f'üóìÔ∏è–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {response["user"]["creation_time"]}',
                                  reply_markup=send_change_account_data_kb())
    except Exception:
        await call.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è')


@user_info_router.callback_query(F.data == 'change_password')
async def password_confirm(call: CallbackQuery, state: FSMContext):
    await state.set_state(User_info_states.Change_password)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ —Ñ–æ—Ä–º–∞—Ç—É: "—Å—Ç–∞—Ä—ã–π_–ø–∞—Ä–æ–ª—å;–Ω–æ–≤—ã–π_–ø–∞—Ä–æ–ª—å"')


@user_info_router.message(User_info_states.Change_password)
async def change_password(message: Message, state: FSMContext):
    try:
        await state.set_state(User_info_states.Success_changes)
        response = requests.put('http://127.0.0.1:5000/bot_api/change_data/email',
                                json={'chat_id': message.chat.id, 'old_password': message.text.split(';')[0],
                                      'new_password': message.text.split(';')[1]}).json()
        if response['success']:
            await message.answer('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
    except KeyError:
        await message.answer(f'{response["error"]}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')

    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è')


@user_info_router.callback_query(F.data == 'change_email')
async def change_email(call: CallbackQuery, state: FSMContext):
    await state.set_state(User_info_states.Change_email)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email')


@user_info_router.message(User_info_states.Change_email)
async def continue_change_email(message: Message, state: FSMContext):
    try:
        await state.set_state(User_info_states.Success_changes)
        response = requests.put('http://127.0.0.1:5000/bot_api/change_data/email',
                                json={'chat_id': message.chat.id, 'new_email': message.text}).json()

        if response['success']:
            await message.answer('Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')

    except KeyError:
        await message.answer(f'{response["error"]}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è')


@user_info_router.callback_query(F.data == 'change_description')
async def change_description(call: CallbackQuery, state: FSMContext):
    await state.set_state(User_info_states.Change_description)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è')


@user_info_router.message(User_info_states.Change_description)
async def continue_change_description(message: Message, state: FSMContext):
    try:
        await state.set_state(User_info_states.Success_changes)
        response = requests.put('http://127.0.0.1:5000/bot_api/change_data/description',
                                json={'chat_id': message.chat.id, 'new_description': message.text}).json()

        if response['success']:
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')

    except KeyError:
        await message.answer(f'{response["error"]}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è')

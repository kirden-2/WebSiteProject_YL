import asyncio

from aiogram import F, Router, Bot
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from Bot.keyboards.inline_kbs import send_view_art_kb, send_view_continue_kb

from aiogram.utils.chat_action import ChatActionSender
from aiogram.utils.media_group import MediaGroupBuilder

from config import SITE_API

import requests

view_arts_router = Router()


def check_art_data(data):
    title = data["title"]
    price = data["price"]

    if not title or not price:
        return '–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
    if '.' in price:
        return '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —è–≤–ª—è—Ç—å—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º'
    try:
        price = int(price)
    except Exception:
        return '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —è–≤–ª—è—Ç—å—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º'
    return 'OK'


class ViewForm(StatesGroup):
    ViewArtWithId = State()


class ArtData(StatesGroup):
    image = State()
    title = State()
    description = State()
    short_description = State()
    price = State()


@view_arts_router.callback_query(F.data == 'view_menu')
@view_arts_router.callback_query(F.data == 'cancel_create')
async def view_menu(call: CallbackQuery):
    await call.message.edit_text('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—É, —É–∫–∞–∑–∞–≤ –µ—ë id, –∏–ª–∏ –∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–∞–±–æ—Ç—É',
                                 reply_markup=send_view_art_kb())
    await call.answer()


@view_arts_router.callback_query(F.data == 'view_random_art')
async def view_random_art(message: CallbackQuery, state: FSMContext):
    await message.message.answer('–ü–æ–¥–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—Ç—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')
    await asyncio.sleep(1)
    try:
        req = requests.get(f'{SITE_API}/arts/random_art').json()
        async with ChatActionSender.upload_photo(bot=message.message.bot, chat_id=message.message.chat.id):
            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
            media = MediaGroupBuilder()
            media.add_photo(FSInputFile(f'WebSite/static/img/{req["art"]["id"]}{req["art"]["extension"]}'),
                            caption=f'''–°–ª—É—á–∞–π–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n
üí°–ù–∞–∑–≤–∞–Ω–∏–µ: {req["art"]["name"]}\n
üè∑Ô∏èid —Ä–∞–±–æ—Ç—ã: {req["art"]["id"]}\n
üîà–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã(–∫—Ä–∞—Ç–∫–æ): {req["art"]["short_description"] if req["art"]["short_description"] else '–æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n
üë®‚Äçüíª–°–æ–∑–¥–∞—Ç–µ–ª—å: {req["art"]["creator"] if req["art"]["creator"] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n
üèÜ–û–±–ª–∞–¥–∞—Ç–µ–ª—å: {req["art"]["owner"] if req["art"]["owner"] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n
üíµ–¶–µ–Ω–∞: {f'{req["art"]["price"]} Digital Coins' if req["art"]["price"] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n
üëÅÔ∏è–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {req["art"]["views"] if req["art"]["views"] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n
‚è±Ô∏è–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {req["art"]["creation_time"] if req["art"]["creation_time"] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n
''')
        await asyncio.sleep(1)
        await message.message.answer_media_group(media=media.build())
        await state.update_data(art_id=req["art"]["id"])
        await message.message.answer('–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–∞–±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –µ—ë –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏',
                                     reply_markup=send_view_continue_kb())
    except Exception:
        await message.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                                     reply_markup=send_view_continue_kb(error=True))


@view_arts_router.callback_query(F.data == 'view_art_with_id')
async def get_art_id(call: CallbackQuery, state: FSMContext):
    await state.set_state(ViewForm.ViewArtWithId)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ id –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å —Ä–∞–±–æ—Ç—ã')


@view_arts_router.message(ViewForm.ViewArtWithId)
async def view_art_with_id(message: Message, state: FSMContext):
    await message.answer('–ò—â–µ–º –Ω—É–∂–Ω—É—é —Ä–∞–±–æ—Ç—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')
    await asyncio.sleep(1)
    await state.set_state(None)
    try:
        req = requests.get(f'{SITE_API}/arts/{message.text}').json()
        async with ChatActionSender.upload_photo(bot=message.bot, chat_id=message.chat.id):
            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
            media = MediaGroupBuilder()
            media.add_photo(FSInputFile(f'WebSite/static/img/arts/{req["art"]["id"]}{req["art"]["extension"]}'),
                            caption=f'''–†–∞–±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n
üí°–ù–∞–∑–≤–∞–Ω–∏–µ: {req["art"]["name"]}\n
üè∑Ô∏èid —Ä–∞–±–æ—Ç—ã: {req["art"]["id"]}\n
üîà–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã(–∫—Ä–∞—Ç–∫–æ): {req["art"]["short_description"] if req["art"]["short_description"] else '–æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n
üë®‚Äçüíª–°–æ–∑–¥–∞—Ç–µ–ª—å: {req["art"]["creator"] if req["art"]["creator"] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n
üèÜ–û–±–ª–∞–¥–∞—Ç–µ–ª—å: {req["art"]["owner"] if req["art"]["owner"] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n
üíµ–¶–µ–Ω–∞: {f'{req["art"]["price"]} Digital Coins' if req["art"]["price"] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n
üëÅÔ∏è–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {req["art"]["views"] if req["art"]["views"] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n
‚è±Ô∏è–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {req["art"]["creation_time"] if req["art"]["creation_time"] else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n
''')
        await asyncio.sleep(1)
        await message.answer_media_group(media=media.build())
        await state.update_data(art_id=req["art"]["id"])
        await message.answer('–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–∞–±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –µ—ë –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏',
                             reply_markup=send_view_continue_kb())
    except Exception:
        await message.answer(f'{req["error"]}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                             reply_markup=send_view_continue_kb(error=True))


@view_arts_router.callback_query(F.data == 'skip')
async def view_continue(call: CallbackQuery):
    await call.message.answer('–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup=send_view_art_kb())


@view_arts_router.callback_query(F.data == 'purchase_artwork')
async def purchase(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        if not check_user_login_now(call.message.chat.id):
            raise PermissionError
        response = requests.post(f'{SITE_API}/purchase/{data["art_id"]}',
                                 json={'chat_id': call.message.chat.id}).json()
        if response["success"]:
            await call.message.answer(f'{response["success"]}')
    except KeyError or IndexError:
        await call.message.answer(response["error"])
    except PermissionError:
        await call.message.answer('–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')


@view_arts_router.callback_query(F.data == 'create_art')
async def set_image(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç\n'
                              '(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: png, jpg, jpeg)',
                              reply_markup=send_cancel_kb())
    await state.set_state(ArtData.image)


@view_arts_router.message(lambda message: message.photo)
async def set_title(message: Message, state: FSMContext):
    await state.update_data(image=message.photo[-1])
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    await state.set_state(ArtData.title)


@view_arts_router.message(ArtData.title)
async def set_description(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    await state.set_state(ArtData.description)


@view_arts_router.message(ArtData.description)
async def set_short_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    await state.set_state(ArtData.short_description)


@view_arts_router.message(ArtData.short_description)
async def set_price(message: Message, state: FSMContext):
    await state.update_data(short_description=message.text)
    await state.update_data(description=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ Digital Coins (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)')
    await state.set_state(ArtData.price)


@view_arts_router.message(ArtData.price)
async def add_art(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(price=message.text)
    user_data = await state.get_data()
    checking_res = check_art_data(user_data)
    if checking_res == 'OK':
        response = requests.post(f'{SITE_API}/arts/add_artwork',
                                 json={'title': user_data["title"], 'description': user_data["description"],
                                       'short_description': user_data["short_description"], 'price': user_data["price"],
                                       'image': user_data["image"].file_id, 'chat_id': message.chat.id}).json()
        if response['success']:
            file = await bot.get_file(user_data["image"].file_id)
            await bot.download_file(file.file_path, f'./WebSite/static/img/{response["art_id"]}.jpg')
            await message.answer(f'–†–∞–±–æ—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥. –ü—Ä–∏—Å–≤–æ–µ–Ω–Ω–æ–µ id: {response["art_id"]}',
                                 reply_markup=send_view_art_kb(login=True))
    else:
        await message.answer(checking_res)


@view_arts_router.callback_query(F.data == 'owned_arts')
async def view_owned_arts(call: CallbackQuery):
    response = requests.get(f'{SITE_API}/arts', json={'chat_id': call.message.chat.id}).json()
    if response["arts"]:
        await call.message.answer(f'–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ(–≤—Å–µ–≥–æ {len(response["arts"])}):')
        for art in response["arts"]:
            await asyncio.sleep(0.5)
            await call.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {art["name"]}; id: {art["id"]}')
    else:
        await call.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∏ –æ–¥–Ω–∞ —Ä–∞–±–æ—Ç–∞')

import requests
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from Bot.keyboards.inline_kbs import send_change_account_data_kb, send_start_login_kb
from config import SITE_API

user_info_router = Router()


class UserInfoStates(StatesGroup):
    change_password = State()
    change_email = State()
    change_description = State()


class UpdatePassword(StatesGroup):
    old_pas = State()
    new_pas = State()
    again_new_pas = State()


async def update_password(data, chat_id):
    old_pas = data.get('old_pas', '')
    new_pas = data.get('new_pas', '')
    again_new_pas = data.get('again_new_pas', '')
    try:
        response = requests.put(f'{SITE_API}/change_account_data/password',
                                json={'chat_id': chat_id,
                                      'old_password': old_pas,
                                      'new_password': new_pas,
                                      'again_new_password': again_new_pas}
                                ).json()
    except requests.RequestException:
        return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'}
    return response


@user_info_router.callback_query(F.data == 'user_info')
async def get_user_info(call: CallbackQuery, state: FSMContext):
    await state.clear()
    chat_id = call.message.chat.id
    try:
        response = requests.post(f'{SITE_API}/user_info',
                                 json={'chat_id': chat_id}
                                 ).json()
    except requests.RequestException:
        await call.message.edit_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                                     reply_markup=send_start_login_kb())
        return

    if response.get('success', ''):
        await call.message.edit_text(
            f'''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {response["user"]["nick_name"]}:

Ô∏èüè∑Ô∏èid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response["user"]["id"]}
üìßemail: {response["user"]["email"] if response["user"]["email"] else "–Ω–µ —É–∫–∞–∑–∞–Ω"}
‚úèÔ∏è–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {response["user"]["description"] if response["user"]["description"] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
üí∞–ë–∞–ª–∞–Ω—Å: {response["user"]["balance"]}
üóìÔ∏è–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {response["user"]["creation_time"]}''',
            reply_markup=send_change_account_data_kb()
        )
    else:
        error = response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await call.message.edit(f'–û—à–∏–±–∫–∞: {error}',
                                reply_markup=send_change_account_data_kb()
                                )


@user_info_router.callback_query(F.data == 'change_password')
async def password_confirm(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å',
                              reply_markup=InlineKeyboardMarkup(
                                  inline_keyboard=[
                                      [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='user_info')]]))
    await state.set_state(UpdatePassword.old_pas)


@user_info_router.callback_query(F.data == 'try_again_pas')
@user_info_router.message(UpdatePassword.old_pas)
async def set_old_pas(message: Message, state: FSMContext):
    await state.update_data(old_pas=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å',
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[
                                 [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='user_info')]])
                         )
    await state.set_state(UpdatePassword.new_pas)


@user_info_router.message(UpdatePassword.new_pas)
async def set_new_pas(message: Message, state: FSMContext):
    await state.update_data(new_pas=message.text)
    await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å',
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[
                                 [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='user_info')]])
                         )
    await state.set_state(UpdatePassword.again_new_pas)


@user_info_router.message(UpdatePassword.again_new_pas)
async def set_again_new_pas(message: Message, state: FSMContext):
    await state.update_data(again_new_pas=message.text)

    data = await state.get_data()
    res = await update_password(data, message.chat.id)
    if res.get('success', ''):
        mes = '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω'
    else:
        error = res.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        mes = f'–û—à–∏–±–∫–∞: {error}'
    await message.answer(mes,
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data='user_info')]]))
    await state.clear()


@user_info_router.callback_query(F.data == 'change_email')
async def email_confirm(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É',
                              reply_markup=InlineKeyboardMarkup(
                                  inline_keyboard=[
                                      [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='user_info')]])
                              )
    await state.set_state(UserInfoStates.change_email)


@user_info_router.message(UserInfoStates.change_email)
async def update_email(message: Message, state: FSMContext):
    try:
        response = requests.put(f'{SITE_API}/change_account_data/email',
                                json={'chat_id': message.chat.id,
                                      'new_email': message.text}).json()
    except requests.RequestException:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
        return

    if response.get('success', ''):
        await message.answer('–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞',
                             reply_markup=InlineKeyboardMarkup(
                                 inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data='user_info')]])
                             )
        await state.clear()
    else:
        error = response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await message.answer(f'–û—à–∏–±–∫–∞: {error}\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –∑–∞–Ω–æ–≤–æ',
                             reply_markup=InlineKeyboardMarkup(
                                 inline_keyboard=[
                                     [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='user_info')]])
                             )


@user_info_router.callback_query(F.data == 'change_description')
async def description_confirm(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è',
                              reply_markup=InlineKeyboardMarkup(
                                  inline_keyboard=[
                                      [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='user_info')]])
                              )
    await state.set_state(UserInfoStates.change_description)


@user_info_router.message(UserInfoStates.change_description)
async def update_description(message: Message, state: FSMContext):
    try:
        response = requests.put(f'{SITE_API}/change_account_data/description',
                                json={'chat_id': message.chat.id,
                                      'new_description': message.text}).json()
    except requests.RequestException:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        return

    if response.get('success', ''):
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
                             reply_markup=InlineKeyboardMarkup(
                                 inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data='user_info')]])
                             )
        await state.clear()
    else:
        error = response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await message.answer(f'–û—à–∏–±–∫–∞: {error}\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ',
                             reply_markup=InlineKeyboardMarkup(
                                 inline_keyboard=[
                                     [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='user_info')]])
                             )
